def config = {
	localProperties {
	    property 'googleApiKey', ''
        property 'multicountrysampledataaddon.import.active', 'false'
	}

	extensions {
	  extName 'admincockpit'
	  extName 'backoffice'
      extName 'cockpit'	
      extName 'hmc'	
	    extName 'mcc'
	    extName 'adaptivesearchsolr'
      extName 'adaptivesearchbackoffice'
      extName 'adaptivesearchsamplesaddon'
			extName 'adaptivesearchwebservices'
      extName 'commerceservicesbackoffice'
	    extName 'solrfacetsearchbackoffice'
	    extName 'solrserver'
	    extName 'ycommercewebservices'
        extName 'b2bcommercebackoffice'
        extName 'b2badmincockpit'
	    extName 'acceleratorwebservicesaddon'
	    extName 'orderselfserviceaddon'
        extName 'b2bacceleratoraddon'
	    extName 'customersupportbackoffice'
	    extName 'customerticketingaddon'
	    extName 'commerceorgsamplesaddon'

	    extName 'rulebuilderbackoffice'
	    extName 'couponbackoffice'
	    extName 'droolsruleengineservices'
	    extName 'couponfacades'
	    extName 'promotionenginesamplesaddon'

	    extName 'cmswebservices'
	    extName 'smarteditwebservices'
	    extName 'cmssmarteditwebservices'
	    extName 'permissionswebservices'
	    extName 'smarteditaddon'
	    extName 'cmssmartedit'
	    extName 'cmsbackoffice'
        extName 'cmsmulticountrycockpit'

	    extName 'previewpersonalizationweb'
	    extName 'personalizationcmsweb'
	    extName 'personalizationsmartedit'
        extName 'personalizationpromotionssmartedit'
	    extName 'personalizationsampledataaddon'
	    extName 'personalizationpromotions'
	    extName 'personalizationpromotionsweb'
	    extName 'personalizationservicesbackoffice'
	    extName 'personalizationpromotionsbackoffice'
	    extName 'personalizationcmsbackoffice'
			extName 'personalizationsearchbackoffice'
			extName 'personalizationsearchsmartedit'
			extName 'personalizationsearchweb'
			extName 'personalizationsearchsamplesaddon'

	    extName 'textfieldconfiguratortemplatebackoffice'
	    extName 'textfieldconfiguratortemplateaddon'
	    extName 'assistedservicestorefront'
	    extName 'assistedservicewebservices'
	    extName 'assistedservicepromotionaddon'

	    extName 'assistedserviceatddtests'
	    extName 'promotionengineatddtests'
	    extName 'textfieldconfiguratortemplateatddtests'
	    extName 'configurablebundleaddon'
        extName 'subscriptionbundlefacades'
        extName 'subscriptionbundleservices'

        extName 'apparelstore'
        extName 'chimelongcockpits'
	    extName 'chimelonginitialdata'
	    extName 'chimelongfulfilmentprocess'
        extName 'chimelongcore'
	    extName 'chimelongstorefront'

	}
}

task setup << {
	apply plugin: 'installer-platform-plugin'
	apply plugin: 'installer-addon-plugin'
	def pl = platform(config)
	pl.setup()

	pl.project.addons {
		names "b2bacceleratoraddon,commerceorgsamplesaddon,promotionenginesamplesaddon,smarteditaddon,textfieldconfiguratortemplateaddon,assistedservicestorefront,assistedservicepromotionaddon,customerticketingaddon,orderselfserviceaddon,adaptivesearchsamplesaddon,multicountrysampledataaddon,pcmbackofficesamplesaddon,personalizationsearchsamplesaddon"
		template "yacceleratorstorefront"
		storeFronts "chimelongstorefront"
		platform pl
	}

	pl.project.addons {
		names "acceleratorwebservicesaddon"
		template "ycommercewebservices"
		storeFronts "ycommercewebservices"
		platform pl
	}
}

task initialize << {
    apply plugin: 'installer-platform-plugin'
    def pl = platform(config)
    pl.build()
    pl.initialize()
}


task start << {
    apply plugin: 'installer-platform-plugin'
    def pl = platform(config)
    pl.start()
}
